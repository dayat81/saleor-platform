apiVersion: apps/v1
kind: Deployment
metadata:
  name: saleor-backoffice-auth
  namespace: saleor-dev
  labels:
    app: saleor-backoffice-auth
    component: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: saleor-backoffice-auth
  template:
    metadata:
      labels:
        app: saleor-backoffice-auth
        component: frontend
    spec:
      containers:
      - name: backoffice
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
        env:
        - name: NEXT_PUBLIC_SALEOR_API_URL
          value: "http://api-dev.aksa.ai/graphql/"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: backoffice-static
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      - name: nginx-config
        configMap:
          name: backoffice-auth-nginx-config
      - name: backoffice-static
        emptyDir: {}
      initContainers:
      - name: build-backoffice
        image: node:18-alpine
        workingDir: /build
        env:
        - name: NEXT_PUBLIC_SALEOR_API_URL
          value: "http://api-dev.aksa.ai/graphql/"
        - name: NODE_ENV
          value: "production"
        command: ["/bin/sh"]
        args:
          - -c
          - |
            echo "üçï Building Saleor F&B Backoffice with Authentication..."
            
            # Create package.json
            cat > package.json << 'EOF'
            {
              "name": "saleor-backoffice",
              "version": "0.1.0",
              "private": true,
              "scripts": {
                "dev": "next dev -p 3001",
                "build": "next build && next export",
                "start": "next start -p 3001",
                "lint": "next lint"
              },
              "dependencies": {
                "@apollo/client": "^3.13.8",
                "@hookform/resolvers": "^5.1.1",
                "@radix-ui/react-accordion": "^1.1.2",
                "@radix-ui/react-avatar": "^1.0.4",
                "@radix-ui/react-dialog": "^1.0.5",
                "@radix-ui/react-dropdown-menu": "^2.0.6",
                "@radix-ui/react-icons": "^1.3.0",
                "@radix-ui/react-label": "^2.0.2",
                "@radix-ui/react-select": "^2.0.0",
                "@radix-ui/react-slot": "^1.0.2",
                "@radix-ui/react-switch": "^1.0.3",
                "@radix-ui/react-tabs": "^1.0.4",
                "@radix-ui/react-toast": "^1.1.5",
                "@tanstack/react-table": "^8.11.8",
                "class-variance-authority": "^0.7.0",
                "clsx": "^2.1.0",
                "graphql": "^16.11.0",
                "lucide-react": "^0.344.0",
                "next": "14.0.4",
                "react": "^18.2.0",
                "react-dom": "^18.2.0",
                "react-hook-form": "^7.59.0",
                "recharts": "^2.12.0",
                "tailwind-merge": "^2.2.1",
                "tailwindcss-animate": "^1.0.7",
                "zod": "^3.25.67",
                "zustand": "^5.0.6"
              },
              "devDependencies": {
                "@types/node": "^20.10.6",
                "@types/react": "^18.2.46",
                "@types/react-dom": "^18.2.18",
                "autoprefixer": "^10.4.16",
                "eslint": "^8.56.0",
                "eslint-config-next": "14.0.4",
                "postcss": "^8.4.32",
                "tailwindcss": "^3.4.0",
                "typescript": "^5.3.3"
              }
            }
            EOF
            
            # Create next.config.js for static export
            cat > next.config.js << 'EOF'
            /** @type {import('next').NextConfig} */
            const nextConfig = {
              output: 'export',
              trailingSlash: true,
              images: {
                unoptimized: true
              },
              env: {
                NEXT_PUBLIC_SALEOR_API_URL: process.env.NEXT_PUBLIC_SALEOR_API_URL || 'http://api-dev.aksa.ai/graphql/',
              },
            }
            
            module.exports = nextConfig
            EOF
            
            # Create a simplified SPA version
            mkdir -p app public
            
            # Create index.html with authentication
            cat > /static/index.html << 'EOF'
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Saleor F&B Backoffice - Login</title>
                <style>
                    * { margin: 0; padding: 0; box-sizing: border-box; }
                    body {
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        min-height: 100vh;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }
                    .container {
                        background: white;
                        border-radius: 16px;
                        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                        padding: 40px;
                        max-width: 400px;
                        width: 90%;
                    }
                    .logo { text-align: center; font-size: 4rem; margin-bottom: 16px; }
                    h1 { text-align: center; margin-bottom: 24px; color: #2d3748; }
                    .form-group { margin-bottom: 20px; }
                    label { display: block; margin-bottom: 8px; font-weight: 600; color: #374151; }
                    input {
                        width: 100%;
                        padding: 12px 16px;
                        border: 2px solid #e5e7eb;
                        border-radius: 8px;
                        font-size: 16px;
                        transition: border-color 0.2s;
                    }
                    input:focus {
                        outline: none;
                        border-color: #667eea;
                    }
                    .btn {
                        width: 100%;
                        padding: 12px;
                        background: #667eea;
                        color: white;
                        border: none;
                        border-radius: 8px;
                        font-size: 16px;
                        font-weight: 600;
                        cursor: pointer;
                        transition: background 0.2s;
                    }
                    .btn:hover { background: #5a6fd8; }
                    .btn:disabled { background: #9ca3af; cursor: not-allowed; }
                    .demo-creds {
                        margin-top: 24px;
                        padding: 16px;
                        background: #f3f4f6;
                        border-radius: 8px;
                        text-align: center;
                        font-size: 14px;
                    }
                    .error {
                        color: #dc2626;
                        font-size: 14px;
                        margin-top: 8px;
                        display: none;
                    }
                    .dashboard {
                        display: none;
                        text-align: center;
                    }
                    .nav-grid {
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                        gap: 16px;
                        margin: 24px 0;
                    }
                    .nav-item {
                        background: #667eea;
                        color: white;
                        padding: 20px;
                        border-radius: 8px;
                        text-decoration: none;
                        transition: transform 0.2s;
                        text-align: center;
                    }
                    .nav-item:hover { transform: translateY(-2px); }
                    .logout-btn {
                        background: #dc2626;
                        color: white;
                        border: none;
                        padding: 8px 16px;
                        border-radius: 6px;
                        cursor: pointer;
                        margin-top: 20px;
                    }
                </style>
            </head>
            <body>
                <div class="container">
                    <div id="login-form">
                        <div class="logo">üçï</div>
                        <h1>Saleor F&B Backoffice</h1>
                        
                        <form id="loginForm">
                            <div class="form-group">
                                <label for="email">Email</label>
                                <input type="email" id="email" value="admin@aksa.ai" required>
                            </div>
                            
                            <div class="form-group">
                                <label for="password">Password</label>
                                <input type="password" id="password" value="admin123" required>
                            </div>
                            
                            <button type="submit" class="btn" id="loginBtn">Sign In</button>
                            <div class="error" id="error"></div>
                        </form>
                        
                        <div class="demo-creds">
                            <strong>Demo Credentials:</strong><br>
                            admin@aksa.ai / admin123
                        </div>
                    </div>
                    
                    <div id="dashboard" class="dashboard">
                        <div class="logo">üçï</div>
                        <h1>F&B Backoffice Dashboard</h1>
                        <p>Welcome to the Food & Beverage Management System</p>
                        
                        <div class="nav-grid">
                            <a href="http://dashboard-dev.aksa.ai/" class="nav-item">
                                <h3>üìä Admin Dashboard</h3>
                                <p>Saleor admin interface</p>
                            </a>
                            <a href="http://storefront-dev.aksa.ai/" class="nav-item">
                                <h3>üõí Storefront</h3>
                                <p>Customer experience</p>
                            </a>
                            <a href="http://api-dev.aksa.ai/graphql/" class="nav-item">
                                <h3>üîó GraphQL API</h3>
                                <p>Backend API</p>
                            </a>
                        </div>
                        
                        <button class="logout-btn" onclick="logout()">Logout</button>
                    </div>
                </div>
                
                <script>
                    const API_URL = 'http://api-dev.aksa.ai/graphql/';
                    
                    // Check if already logged in
                    if (localStorage.getItem('auth_token')) {
                        showDashboard();
                    }
                    
                    document.getElementById('loginForm').addEventListener('submit', async (e) => {
                        e.preventDefault();
                        
                        const email = document.getElementById('email').value;
                        const password = document.getElementById('password').value;
                        const btn = document.getElementById('loginBtn');
                        const error = document.getElementById('error');
                        
                        btn.disabled = true;
                        btn.textContent = 'Signing in...';
                        error.style.display = 'none';
                        
                        try {
                            const response = await fetch(API_URL, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    query: `
                                        mutation TokenAuth($email: String!, $password: String!) {
                                            tokenCreate(email: $email, password: $password) {
                                                token
                                                user {
                                                    id
                                                    email
                                                    firstName
                                                    lastName
                                                    isStaff
                                                }
                                                errors {
                                                    field
                                                    message
                                                }
                                            }
                                        }
                                    `,
                                    variables: { email, password }
                                })
                            });
                            
                            const data = await response.json();
                            
                            if (data.data.tokenCreate.errors.length > 0) {
                                error.textContent = data.data.tokenCreate.errors[0].message;
                                error.style.display = 'block';
                            } else if (data.data.tokenCreate.token) {
                                localStorage.setItem('auth_token', data.data.tokenCreate.token);
                                localStorage.setItem('user', JSON.stringify(data.data.tokenCreate.user));
                                showDashboard();
                            }
                        } catch (err) {
                            error.textContent = 'Login failed. Please try again.';
                            error.style.display = 'block';
                        }
                        
                        btn.disabled = false;
                        btn.textContent = 'Sign In';
                    });
                    
                    function showDashboard() {
                        document.getElementById('login-form').style.display = 'none';
                        document.getElementById('dashboard').style.display = 'block';
                    }
                    
                    function logout() {
                        localStorage.removeItem('auth_token');
                        localStorage.removeItem('user');
                        document.getElementById('login-form').style.display = 'block';
                        document.getElementById('dashboard').style.display = 'none';
                    }
                </script>
            </body>
            </html>
            EOF
            
            echo "‚úÖ Authentication-enabled backoffice created successfully!"
            ls -la /static/
        volumeMounts:
        - name: backoffice-static
          mountPath: /static
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: saleor-backoffice-auth
  namespace: saleor-dev
  labels:
    app: saleor-backoffice-auth
    component: frontend
spec:
  selector:
    app: saleor-backoffice-auth
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backoffice-auth-nginx-config
  namespace: saleor-dev
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;
        
        # Handle all routes for SPA
        location / {
            try_files $uri $uri/ /index.html;
            add_header X-Frame-Options DENY;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Proxy API requests to avoid CORS
        location /api/ {
            proxy_pass http://saleor-api:8000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Proxy GraphQL requests
        location /graphql/ {
            proxy_pass http://saleor-api:8000/graphql/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Enable gzip compression
        gzip on;
        gzip_vary on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml text/javascript;
    }